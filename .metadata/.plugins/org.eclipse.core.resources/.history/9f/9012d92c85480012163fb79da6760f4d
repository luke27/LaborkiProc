//g³ówny Fragment Shader programu
#version 100

precision mediump float;
varying vec2 v_texCoord;
varying vec3 v_normal;
uniform sampler2D sam2D;

varying vec3 v_normalSurface;
varying vec3 v_lightDir; //kierunek œwiat³a

//œwiat³o
uniform vec4 lightDiffuse;
uniform vec4 lightAmbient;
uniform vec4 lightSpecular;
///objekt
uniform vec4 matDiffuse;
uniform vec4 matAmbient;
uniform vec4 matSpecular;

//funkcje
vec4 calculateDiffuse();
vec4 calculateSpecular();
vec4 calculateAmbient();
vec4 phongLigthing();

void main()
{
	//vec3 normal = normalize(v_normal);
	//vec4 a = calculateDiffuse();
	gl_FragColor = phongLigthing();
}

vec4 calculateDiffuse()
{
	float dotProd = max(0.0, dot(v_normal, v_lightDir));
	return matDiffuse * lightDiffuse * dotProd;
	//return lightDiffuse * dotProd;
}

vec4 calculateSpecular()
{
	float shininess = 128.0;
	vec3 reflection = reflect(-v_lightDir, v_normalSurface);
	float refAngle = max(0.0, dot(v_normalSurface, reflection));
	float spec = pow(refAngle, shininess);
	return matSpecular * lightSpecular * spec;
	//return lightSpecular * spec;
}


vec4 calculateAmbient()
{
	return lightAmbient * matAmbient;
}

vec4 phongLigthing()
{
	vec4 retColor = calculateDiffuse();
	retColor += calculateAmbient();
	retColor *= texture2D(sam2D, v_texCoord);
	retColor += calculateSpecular();
	return retColor;
}